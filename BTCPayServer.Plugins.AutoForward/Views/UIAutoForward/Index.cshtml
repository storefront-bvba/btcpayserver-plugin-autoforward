@using BTCPayServer.Abstractions.Extensions
@using BTCPayServer.Client.Models
@using BTCPayServer.Components
@using BTCPayServer.Plugins.AutoForward.Views
@using BTCPayServer.Services
@using BTCPayServer.Services.Invoices
@using Microsoft.AspNetCore.Mvc.TagHelpers
@using NBitcoin
@inject DisplayFormatter DisplayFormatter
@model BTCPayServer.Plugins.AutoForward.Controllers.InvoicesViewModel
@{
    ViewData.SetActivePage(PluginNavPages.Index, "Auto-Forward Payments");
    ViewData.SetActiveCategory(typeof(AutoForwardNavPages));
}

<div class="sticky-header-setup"></div>
<div class="sticky-header mb-l">

    <partial name="Partials/AutoForwardMenu"/>

    @* 
    TODO add support to manually create an auto-forwardable invoice?
    <a id="CreateNewInvoice" asp-action="CreateInvoice" asp-route-storeId="@Model.StoreId" asp-route-searchTerm="@Model.SearchTerm" class="btn btn-primary mt-3 mt-sm-0"> *@
    @*     <span class="fa fa-plus"></span> *@
    @*     Create Invoice *@
    @* </a> *@

</div>

<div class="d-flex align-items-center justify-content-between mb-3">
    <h3 class="mb-0">Auto-Forwardable Invoices</h3>
</div>

<p>This page shows all invoices that have auto-forwarding enabled. For an invoice to be "auto-forwardable", certain conditions need to be met. <a asp-action="Help">Read about this in our help section.</a></p>

<div class="table-responsive">
    <table id="invoices" class="table table-hover">
        <thead>
        <tr>
            <th>Date</th>
            <th class="text-nowrap">Invoice ID</th>
            <th class="text-nowrap">Order ID</th>
            <th class="text-nowrap">Forward to</th>
            <th class="text-nowrap text-end">Percent to forward</th>
            <th class="text-nowrap">Invoice Status</th>
            <th class="text-nowrap text-end">Invoiced</th>
            <th class="text-nowrap text-end">Received</th>
            <th class="text-nowrap text-end">To forward</th>
            <th class="text-nowrap">Payout ID</th>
            <th class="text-nowrap">Payout Status</th>
            <th class="text-nowrap text-end">Payout Amount</th>
            <th class="text-nowrap text-end">Forwarded</th>
        </tr>
        </thead>
        <tbody>
        @{
            decimal totalToForward = 0;
            decimal totalForwarded = 0;
            decimal totalReceived = 0;
            decimal totalPayoutAmount = 0;
        }

        @foreach (var invoice in Model.Invoices)
        {
            decimal amountToForward = 0;
            decimal amountReceived = 0;

            if (invoice.AmountReceived.ToDecimal(MoneyUnit.BTC) > 0)
            {
                amountReceived = invoice.AmountReceived.ToDecimal(MoneyUnit.BTC);
                amountToForward = invoice.AutoForwardPercentage * amountReceived;

                totalToForward += amountToForward;
                totalReceived += amountReceived;
                if (invoice.Payout != null)
                {
                    totalPayoutAmount += invoice.Payout.Amount;
                    if (invoice.Payout.State == PayoutState.Completed)
                    {
                        totalForwarded += amountToForward;
                    }
                }
            }

            <tr id="invoice_@invoice.InvoiceId" class="invoice-row @(invoice.AutoForwardCompleted ? "table-secondary":"")">
                <td>@invoice.Date.ToBrowserDate()</td>
                <td class="text-break">
                    <a asp-controller="UIInvoice" asp-action="Invoice" class="invoice-details-link" asp-route-invoiceId="@invoice.InvoiceId">
                        @invoice.InvoiceId
                    </a>
                </td>
                <td>
                    <span class="wraptextAuto">@invoice.OrderId</span>
                </td>


                <td>
                    @invoice.AutoForwardToAddress
                </td>

                <td class="text-end">
                    @(invoice.AutoForwardPercentage * 100) %
                </td>

                <td>
                    <span class="badge badge-@invoice.Status.Status.ToModernStatus().ToString().ToLower()">
                        @invoice.Status.Status.ToModernStatus().ToString()
                        @if (invoice.Status.ExceptionStatus != InvoiceExceptionStatus.None)
                        {
                            @($"({invoice.Status.ExceptionStatus.ToString()})")
                        }
                    </span>

                    @if (invoice.AutoForwardCompleted)
                    {
                        <span class="badge badge-settled">
                            Forwarded
                        </span>
                    }

                    @foreach (var paymentType in invoice.Payments.Select(payment => payment.GetPaymentMethodId()?.PaymentType).Distinct().Where(type => type != null && !string.IsNullOrEmpty(type.GetBadge())))
                    {
                        <span class="badge">@paymentType.GetBadge()</span>
                    }
                    @if (invoice.HasRefund)
                    {
                        <span class="badge bg-warning">Refund</span>
                    }
                </td>


                <td class="text-end text-nowrap">@DisplayFormatter.Currency(invoice.Amount, invoice.Currency)</td>

                <td class="text-end">
                    @if (invoice.AmountReceived.ToDecimal(MoneyUnit.BTC) > 0)
                    {
                        @DisplayFormatter.Currency(invoice.AmountReceived.ToDecimal(MoneyUnit.BTC), invoice.AmountReceivedCryptoCode)
                    }
                </td>

                <!-- Amount to forward -->
                <td class="text-end text-nowrap">
                    @if (amountToForward > 0)
                    {
                        @DisplayFormatter.Currency((decimal)amountToForward, invoice.AmountReceivedCryptoCode)
                    }
                </td>

                <!-- Payout ID -->
                <td>
                    @invoice.Payout?.Id
                </td>

                <!-- Payout status -->
                <td>
                    @invoice.Payout?.State
                </td>

                <!-- Payout amount -->
                <td class="text-end text-nowrap">
                    @if (invoice.Payout != null)
                    {
                        @DisplayFormatter.Currency(invoice.Payout.Amount, invoice.Payout.CryptoCode)
                    }
                </td>

                <!-- Amount forwarded -->
                <td class="text-end text-nowrap">
                    @if (invoice.Payout?.State == PayoutState.Completed && amountToForward > 0)
                    {
                        @DisplayFormatter.Currency((decimal)amountToForward, invoice.AmountReceivedCryptoCode)
                    }
                </td>
            </tr>
        }
        </tbody>
        <tfoot>
        <tr>
            <th>
                Total
            </th>
            <th></th>
            <th></th>
            <th></th>
            <th></th>
            <th></th>
            <th></th>
            <th class="text-end text-nowrap">
                @DisplayFormatter.Currency(totalReceived, "BTC")
            </th>
            <th class="text-end text-nowrap">
                @DisplayFormatter.Currency(totalToForward, "BTC")
            </th>
            <th></th>
            <th></th>
             <th class="text-end text-nowrap">
                            @DisplayFormatter.Currency(totalPayoutAmount, "BTC")
                        </th>
            <th class="text-end text-nowrap">
                @DisplayFormatter.Currency(totalForwarded, "BTC")
            </th>

        </tr>
        </tfoot>
    </table>
</div>

<vc:pager view-model="Model"/>


@* <h2>Totals</h2> *@
@* - Total received *@
@* - Total to be forwarded *@
@* - Total already forwarded *@
@* --> *@
@* *@
@* <!-- *@
@* *@
@* *@
@* <a href="https://twitter.com/NicolasDorier/status/1307221679014256640"> *@
@*     <img src="/Resources/img/screengrab.png"/> *@
@* </a> *@
@* *@
@* *@
@* <h2>Persisted Data</h2> *@
@* <p> *@
@*     The following is data persisted to the configured database but in an isolated DbContext. *@
@*     Every time you start BTCPay Server with this plugin enabled, a timestamp is logged. *@
@* </p> *@
@* <ul class="list-group"> *@
@*     @foreach (var item in Model.Data) *@
@*     { *@
@*         <li class="list-group-item">@item.Id at @item.Timestamp.ToString("F")</li> *@
@*     } *@
